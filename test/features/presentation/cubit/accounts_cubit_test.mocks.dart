// Mocks generated by Mockito 5.0.17 from annotations
// in rent_ready_task/test/features/presentation/cubit/accounts_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rent_ready_task/core/error/response_erorr.dart' as _i6;
import 'package:rent_ready_task/core/usecases/use_case.dart' as _i8;
import 'package:rent_ready_task/features/accounts/data/models/account.dart'
    as _i11;
import 'package:rent_ready_task/features/accounts/data/models/accounts_response.dart'
    as _i7;
import 'package:rent_ready_task/features/accounts/data/models/search_filter_request.dart'
    as _i12;
import 'package:rent_ready_task/features/accounts/data/repository/accounts_repository.dart'
    as _i2;
import 'package:rent_ready_task/features/accounts/domain/accounts_usecase.dart'
    as _i4;
import 'package:rent_ready_task/features/accounts/domain/get_filtered_menu_list_usecase.dart'
    as _i9;
import 'package:rent_ready_task/features/accounts/domain/search_filter_usecase.dart'
    as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAccountsRepository_0 extends _i1.Fake
    implements _i2.AccountsRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [AccountsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountsUseCase extends _i1.Mock implements _i4.AccountsUseCase {
  MockAccountsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeAccountsRepository_0()) as _i2.AccountsRepository);
  @override
  _i5.Future<_i3.Either<_i6.ResponseError, _i7.AccountsResponse?>> call(
          _i8.NoParam? noParam) =>
      (super.noSuchMethod(Invocation.method(#call, [noParam]),
          returnValue: Future<
                  _i3.Either<_i6.ResponseError, _i7.AccountsResponse?>>.value(
              _FakeEither_1<_i6.ResponseError, _i7.AccountsResponse?>())) as _i5
          .Future<_i3.Either<_i6.ResponseError, _i7.AccountsResponse?>>);
}

/// A class which mocks [GetFilteredMenuListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFilteredMenuListUseCase extends _i1.Mock
    implements _i9.GetFilteredMenuListUseCase {
  MockGetFilteredMenuListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeAccountsRepository_0()) as _i2.AccountsRepository);
  @override
  _i5.Future<_i3.Either<_i6.ResponseError, Set<String>?>> call(
          _i8.NoParam? noParam) =>
      (super.noSuchMethod(Invocation.method(#call, [noParam]),
              returnValue:
                  Future<_i3.Either<_i6.ResponseError, Set<String>?>>.value(
                      _FakeEither_1<_i6.ResponseError, Set<String>?>()))
          as _i5.Future<_i3.Either<_i6.ResponseError, Set<String>?>>);
}

/// A class which mocks [SearchFilterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchFilterUseCase extends _i1.Mock
    implements _i10.SearchFilterUseCase {
  MockSearchFilterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeAccountsRepository_0()) as _i2.AccountsRepository);
  @override
  _i5.Future<_i3.Either<_i6.ResponseError, List<_i11.Account>?>> call(
          _i12.SearchFilterCriteriaRequest? request) =>
      (super.noSuchMethod(Invocation.method(#call, [request]),
              returnValue: Future<
                      _i3.Either<_i6.ResponseError, List<_i11.Account>?>>.value(
                  _FakeEither_1<_i6.ResponseError, List<_i11.Account>?>()))
          as _i5.Future<_i3.Either<_i6.ResponseError, List<_i11.Account>?>>);
}
